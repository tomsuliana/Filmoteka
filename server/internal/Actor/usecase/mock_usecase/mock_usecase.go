// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	entity "server/internal/domain/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockActorUsecaseI is a mock of ActorUsecaseI interface.
type MockActorUsecaseI struct {
	ctrl     *gomock.Controller
	recorder *MockActorUsecaseIMockRecorder
}

// MockActorUsecaseIMockRecorder is the mock recorder for MockActorUsecaseI.
type MockActorUsecaseIMockRecorder struct {
	mock *MockActorUsecaseI
}

// NewMockActorUsecaseI creates a new mock instance.
func NewMockActorUsecaseI(ctrl *gomock.Controller) *MockActorUsecaseI {
	mock := &MockActorUsecaseI{ctrl: ctrl}
	mock.recorder = &MockActorUsecaseIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorUsecaseI) EXPECT() *MockActorUsecaseIMockRecorder {
	return m.recorder
}

// CreateActor mocks base method.
func (m *MockActorUsecaseI) CreateActor(newActor *entity.Actor) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", newActor)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockActorUsecaseIMockRecorder) CreateActor(newActor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockActorUsecaseI)(nil).CreateActor), newActor)
}

// DeleteActor mocks base method.
func (m *MockActorUsecaseI) DeleteActor(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorUsecaseIMockRecorder) DeleteActor(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActorUsecaseI)(nil).DeleteActor), id)
}

// GetActors mocks base method.
func (m *MockActorUsecaseI) GetActors() ([]*entity.ActorWithFilms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors")
	ret0, _ := ret[0].([]*entity.ActorWithFilms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActors indicates an expected call of GetActors.
func (mr *MockActorUsecaseIMockRecorder) GetActors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockActorUsecaseI)(nil).GetActors))
}

// UpdateActor mocks base method.
func (m *MockActorUsecaseI) UpdateActor(newActor *entity.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", newActor)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorUsecaseIMockRecorder) UpdateActor(newActor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActorUsecaseI)(nil).UpdateActor), newActor)
}
