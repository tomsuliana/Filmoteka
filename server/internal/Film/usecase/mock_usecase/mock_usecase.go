// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	entity "server/internal/domain/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockFilmUsecaseI is a mock of FilmUsecaseI interface.
type MockFilmUsecaseI struct {
	ctrl     *gomock.Controller
	recorder *MockFilmUsecaseIMockRecorder
}

// MockFilmUsecaseIMockRecorder is the mock recorder for MockFilmUsecaseI.
type MockFilmUsecaseIMockRecorder struct {
	mock *MockFilmUsecaseI
}

// NewMockFilmUsecaseI creates a new mock instance.
func NewMockFilmUsecaseI(ctrl *gomock.Controller) *MockFilmUsecaseI {
	mock := &MockFilmUsecaseI{ctrl: ctrl}
	mock.recorder = &MockFilmUsecaseIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmUsecaseI) EXPECT() *MockFilmUsecaseIMockRecorder {
	return m.recorder
}

// AddActorToFilm mocks base method.
func (m *MockFilmUsecaseI) AddActorToFilm(actor *entity.Actor, filmId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActorToFilm", actor, filmId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddActorToFilm indicates an expected call of AddActorToFilm.
func (mr *MockFilmUsecaseIMockRecorder) AddActorToFilm(actor, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActorToFilm", reflect.TypeOf((*MockFilmUsecaseI)(nil).AddActorToFilm), actor, filmId)
}

// CreateFilm mocks base method.
func (m *MockFilmUsecaseI) CreateFilm(newFilm *entity.FilmWithActors) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilm", newFilm)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilm indicates an expected call of CreateFilm.
func (mr *MockFilmUsecaseIMockRecorder) CreateFilm(newFilm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilm", reflect.TypeOf((*MockFilmUsecaseI)(nil).CreateFilm), newFilm)
}

// DeleteActorFromFilm mocks base method.
func (m *MockFilmUsecaseI) DeleteActorFromFilm(actor *entity.Actor, filmId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActorFromFilm", actor, filmId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActorFromFilm indicates an expected call of DeleteActorFromFilm.
func (mr *MockFilmUsecaseIMockRecorder) DeleteActorFromFilm(actor, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActorFromFilm", reflect.TypeOf((*MockFilmUsecaseI)(nil).DeleteActorFromFilm), actor, filmId)
}

// DeleteFilm mocks base method.
func (m *MockFilmUsecaseI) DeleteFilm(filmId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", filmId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockFilmUsecaseIMockRecorder) DeleteFilm(filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockFilmUsecaseI)(nil).DeleteFilm), filmId)
}

// GetFilms mocks base method.
func (m *MockFilmUsecaseI) GetFilms(name, releaseDate bool) ([]*entity.FilmWithActors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilms", name, releaseDate)
	ret0, _ := ret[0].([]*entity.FilmWithActors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilms indicates an expected call of GetFilms.
func (mr *MockFilmUsecaseIMockRecorder) GetFilms(name, releaseDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilms", reflect.TypeOf((*MockFilmUsecaseI)(nil).GetFilms), name, releaseDate)
}

// Search mocks base method.
func (m *MockFilmUsecaseI) Search(word string) ([]*entity.FilmWithActors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", word)
	ret0, _ := ret[0].([]*entity.FilmWithActors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockFilmUsecaseIMockRecorder) Search(word interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockFilmUsecaseI)(nil).Search), word)
}

// UpdateFilm mocks base method.
func (m *MockFilmUsecaseI) UpdateFilm(newFilm *entity.Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilm", newFilm)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilm indicates an expected call of UpdateFilm.
func (mr *MockFilmUsecaseIMockRecorder) UpdateFilm(newFilm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilm", reflect.TypeOf((*MockFilmUsecaseI)(nil).UpdateFilm), newFilm)
}
